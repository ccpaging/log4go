// Copyright (C) 2010, Kyle Lemons <kyle@kylelemons.net>.  All rights reserved.

package log4go

import (
	"fmt"
	"io"
	"os"
)

var stdout io.Writer = os.Stdout

// This is the standard writer that prints to standard output.
type ConsoleLogWriter struct {
	out		io.Writer
	format 	string
	prefix  string
}

// This creates a new ConsoleLogWriter
func NewConsoleLogWriter() *ConsoleLogWriter {
	c := &ConsoleLogWriter{
		out:	stdout,
		format: FORMAT_DEFAULT,
	}
	return c
}

// Set the logging format (chainable).  Must be called before the first log
// message is written.
func (c *ConsoleLogWriter) SetFormat(format string) *ConsoleLogWriter {
	c.format = format
	return c
}

func (c *ConsoleLogWriter) Close() {
}

func (c *ConsoleLogWriter) LogWrite(rec *LogRecord) {
	fmt.Fprint(c.out, c.prefix + FormatLogRecord(c.format, rec))
}

// Compatibility with `log`
// These flags define which text to prefix to each log entry generated by the Logger.
const (
	// Bits or'ed together to control what's printed.
	// There is no control over the order they appear (the order listed
	// here) or the format they present (as described in the comments).
	// The prefix is followed by a colon only when Llongfile or Lshortfile
	// is specified.
	// For example, flags Ldate | Ltime (or LstdFlags) produce,
	//	2009/01/23 01:23:23 message
	// while flags Ldate | Ltime | Lmicroseconds | Llongfile produce,
	//	2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message
	Ldate         = 1 << iota     // the date in the local time zone: 2009/01/23
	Ltime                         // the time in the local time zone: 01:23:23
	Lmicroseconds                 // microsecond resolution: 01:23:23.123123.  assumes Ltime.
	Llongfile                     // full file name and line number: /a/b/c/d.go:23
	Lshortfile                    // final file name element and line number: d.go:23. overrides Llongfile
	LUTC                          // if Ldate or Ltime is set, use UTC rather than the local time zone
	LstdFlags     = Ldate | Ltime // initial values for the standard logger
)

// Compatibility with `log`
// New creates a new Logger. The out variable sets the
// destination to which log data will be written.
// The prefix appears at the beginning of each generated log line.
// The flag argument defines the logging properties.
func NewOutLogWriter(out io.Writer, prefix string, flag int) *ConsoleLogWriter {
	c := &ConsoleLogWriter{
		out:	stdout,
		format: FORMAT_DEFAULT,
	}
	c.SetOutput(out)
	c.SetPrefix(prefix)
	c.SetFlags(flag)
	return c
}

// Compatibility with `log`
// SetOutput sets the output destination for the logger. 
// Must be called before the first log message is written.
func (c *ConsoleLogWriter) SetOutput(w io.Writer) {
	c.out = w
}

// Compatibility with `log`
// SetFlags sets the output flags for the logger.
// Must be called before the first log message is written.
func (c *ConsoleLogWriter) SetFlags(flag int) {
	fmt := ""
	if flag&LUTC != 0 {
		// Not support
		fmt += ""
	}

	if flag&Ldate != 0 {
		fmt += "%D "
	}
	if flag&(Ltime|Lmicroseconds) != 0 {
		if flag&Lmicroseconds != 0 {
			// Not support
			fmt += "%T "
		} else {
			fmt += "%T "
		}
	}
	if flag&Llongfile != 0 {
		fmt += "%S "
	}
	if flag&Lshortfile != 0 {
		fmt += "%s "
	}

	c.format = fmt + "%M"
}

// Compatibility with `log`
// SetPrefix sets the output prefix for the logger.
// Must be called before the first log message is written.
func (c *ConsoleLogWriter) SetPrefix(prefix string) {
	c.prefix = prefix
}
